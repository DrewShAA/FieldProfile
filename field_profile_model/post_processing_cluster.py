import numpy as np
import cv2 as cv
import sys
from pathlib import Path
import sklearn.linear_model
import matplotlib.pyplot as plt
from matplotlib import cm

if Path(__file__).absolute().parents[0].as_posix() not in sys.path:
    sys.path.append(Path(__file__).absolute().parents[0].as_posix())

from field_profile_model import clusterization
from field_profile_model.calc_angle_btw_planes import calculate_angle_btw_plane


class Cluster:
    def __init__(self,
                 cluster_id: int,
                 cluster_area: np.ndarray,
                 min_i: int,
                 max_i: int,
                 min_j: int,
                 max_j: int,
                 ):
        self.id = cluster_id
        self.area_cluster: np.ndarray = cluster_area
        self.area_elevation: np.ndarray = np.zeros(cluster_area.shape[:2])
        self.area_points: np.ndarray = np.full((*cluster_area.shape[:2], 3), fill_value=0)
        self.min_i: int = min_i
        self.max_i: int = max_i
        self.min_j: int = min_j
        self.max_j: int = max_j
        self.area_point_with_predict_point: np.ndarray

    def clear_bad_cluster_id_in_area(self):
        rows, column = self.area_cluster.shape[:2]
        for i in range(rows):
            for j in range(column):
                if self.area_cluster[i][j] == self.id:
                    continue
                self.area_cluster[i][j] = None

    def set_elevation(self, elevation_matrix: np.ndarray, is_clear_wrong_id: bool = False):
        assert isinstance(elevation_matrix, np.ndarray)
        h, w = elevation_matrix.shape[:2]
        assert self.max_i <= h, f'Входная матрица имеет меньше строк {h} < {self.max_i}'
        assert self.max_j <= w, f'Входная матрица имеет меньше столбцов {w} < {self.max_j}'

        if is_clear_wrong_id:
            self.clear_bad_cluster_id_in_area()

        rows, column = self.area_cluster.shape[:2]
        for i in range(rows):
            for j in range(column):
                if self.area_cluster[i][j] != self.id:
                    self.area_elevation[i][j] = 0
                    continue
                # self.area_elevation[i][j] = elevation_matrix[i][j]
                self.area_elevation[i][j] = elevation_matrix[self.min_i + i][self.min_j + j]

    def set_point_m(self, point_matrix: np.ndarray):
        assert isinstance(point_matrix, np.ndarray)
        h, w = point_matrix.shape[:2]
        assert self.max_i <= h, f'Входная матрица имеет меньше строк {h} < {self.max_i}'
        assert self.max_j <= w, f'Входная матрица имеет меньше столбцов {w} < {self.max_j}'

        rows, column = self.area_cluster.shape[:2]
        for i in range(rows):
            for j in range(column):
                if self.area_cluster[i][j] != self.id:
                    # self.area_points[i][j] = point_matrix[self.min_i + i][self.min_j + j].copy()
                    # self.area_points[i][j][2] = 0
                    self.area_points[i][j] = point_matrix[self.min_i + i][self.min_j + j]
                    self.area_points[i][j][2] = 0

                    continue
                self.area_points[i][j] = point_matrix[self.min_i + i][self.min_j + j]

    def get_list_of_points(self):
        return [list(el) for row in self.area_points for el in row]

    def print_line(self):
        for num, row in enumerate(self.area_points):
            print(f'{num}: ', row)


def create_train_test(points_array: np.ndarray):
    # [[0, 0, 209], [0, 30, 207], [0, 61, 208], [0, 92, 209], [0, 123, 212], [0, 154, 214], [0, 185, 215]
    result_points = points_array.copy()
    points = [list(el) for row in points_array for el in row]
    x_train = []
    y_train = []
    x_test = []
    position = []
    for point in points:
        if point[2] == 0:
            x_test.append(point[:2])
            continue
        x_train.append(point[:2])
        y_train.append(point[2])

    model = sklearn.linear_model.LinearRegression()
    model.fit(x_train, y_train)

    rows, column = points_array.shape[:2]
    for i in range(rows):
        for j in range(column):
            if points_array[i][j][2] == 0:
                x_y = [list(points_array[i][j][:2])]
                res = int(model.predict(x_y)[0])
                result_points[i][j][2] = res

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(result_points[:, :, 0], result_points[:, :, 1], result_points[:, :, 2], marker='.', color='red')
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")

    coefs = model.coef_
    intercept = model.intercept_
    xs = result_points[:, :, 0]
    ys = result_points[:, :, 1]
    zs = result_points[:, :, 0] * coefs[0] + result_points[:, :, 1] * coefs[1] + intercept
    colors = list(set(zs.flatten()))
    equation = "{:.2f}x + {:.2f}y - z + {:.2f} = 0".format(coefs[0], coefs[1], intercept)

    angle = calculate_angle_btw_plane(c2=1, a1=coefs[0], b1=coefs[1], c1=-1)
    ax.set_title(f'angle = {angle}')

    ax.plot_surface(result_points[:, :, 0], result_points[:, :, 1], zs, cmap=cm.gist_earth, alpha=0.5)

    plt.show()

    return result_points, xs, ys, zs, angle, equation


def get_real_elevation():
    matrix = np.array([[
        209.0, 207.0, 208.0, 209.0, 212.0, 214.0, 215.0, 217.0, 219.0, 217.0, 217.0, 216.0, 218.0, 219.0, 221.0, 220.0,
        221.0, 222.0, 223.0, 223.0, 224.0, 225.0, 225.0, 225.0, 225.0, 223.0, 221.0, 220.0, 220.0, 217.0, 216.0, 217.0,
        217.0, 217.0, 216.0, 214.0, 212.0, 211.0, 211.0, 211.0, 213.0, 212.0, 212.0, 213.0, 213.0, 211.0
    ],
    [
        210.0, 208.0, 207.0, 209.0, 211.0, 214.0, 215.0, 216.0, 219.0, 219.0, 220.0, 217.0, 220.0, 219.0, 221.0, 221.0,
        222.0, 223.0, 224.0, 224.0, 224.0, 225.0, 224.0, 224.0, 224.0, 224.0, 221.0, 221.0, 219.0, 217.0, 216.0, 218.0,
        218.0, 215.0, 215.0, 214.0, 212.0, 212.0, 213.0, 214.0, 214.0, 213.0, 213.0, 213.0, 212.0, 211.0
    ],
    [
        211.0, 210.0, 208.0, 209.0, 210.0, 216.0, 214.0, 216.0, 217.0, 220.0, 221.0, 223.0, 223.0, 220.0, 222.0, 223.0,
        223.0, 224.0, 225.0, 224.0, 225.0, 225.0, 225.0, 224.0, 224.0, 224.0, 221.0, 221.0, 220.0, 219.0, 218.0, 218.0,
        218.0, 216.0, 216.0, 214.0, 211.0, 214.0, 215.0, 214.0, 214.0, 215.0, 214.0, 214.0, 212.0, 213.0
    ],
    [
        212.0, 210.0, 208.0, 210.0, 211.0, 214.0, 216.0, 216.0, 218.0, 220.0, 220.0, 223.0, 225.0, 223.0, 224.0, 224.0,
        226.0, 226.0, 224.0, 223.0, 225.0, 226.0, 226.0, 225.0, 224.0, 224.0, 225.0, 223.0, 221.0, 221.0, 219.0, 219.0,
        217.0, 217.0, 215.0, 214.0, 213.0, 215.0, 216.0, 214.0, 215.0, 217.0, 216.0, 215.0, 213.0, 214.0
    ],
    [
        212.0, 210.0, 209.0, 210.0, 211.0, 216.0, 221.0, 219.0, 219.0, 221.0, 220.0, 224.0, 226.0, 224.0, 224.0, 225.0,
        226.0, 226.0, 225.0, 223.0, 225.0, 225.0, 226.0, 226.0, 224.0, 225.0, 226.0, 224.0, 223.0, 222.0, 220.0, 219.0,
        218.0, 218.0, 217.0, 214.0, 214.0, 216.0, 216.0, 215.0, 213.0, 216.0, 216.0, 214.0, 214.0, 215.0
    ],
    [
        212.0, 210.0, 210.0, 211.0, 213.0, 216.0, 219.0, 220.0, 220.0, 222.0, 222.0, 224.0, 226.0, 227.0, 227.0, 227.0,
        227.0, 226.0, 226.0, 226.0, 226.0, 227.0, 227.0, 227.0, 227.0, 226.0, 226.0, 225.0, 223.0, 222.0, 222.0, 220.0,
        218.0, 218.0, 217.0, 215.0, 215.0, 215.0, 217.0, 218.0, 217.0, 215.0, 213.0, 213.0, 213.0, 215.0
    ],
    [
        213.0, 211.0, 211.0, 212.0, 214.0, 217.0, 220.0, 220.0, 221.0, 223.0, 224.0, 225.0, 227.0, 229.0, 229.0, 228.0,
        228.0, 227.0, 227.0, 227.0, 227.0, 227.0, 228.0, 228.0, 227.0, 227.0, 226.0, 227.0, 224.0, 223.0, 222.0, 222.0,
        220.0, 218.0, 217.0, 216.0, 216.0, 215.0, 217.0, 221.0, 222.0, 214.0, 214.0, 214.0, 214.0, 215.0
    ],
    [
        214.0, 211.0, 210.0, 213.0, 216.0, 217.0, 220.0, 221.0, 222.0, 225.0, 225.0, 226.0, 228.0, 229.0, 229.0, 229.0,
        230.0, 228.0, 228.0, 228.0, 226.0, 225.0, 227.0, 227.0, 227.0, 226.0, 228.0, 228.0, 224.0, 221.0, 223.0, 220.0,
        220.0, 218.0, 218.0, 216.0, 216.0, 217.0, 219.0, 223.0, 225.0, 215.0, 218.0, 217.0, 217.0, 216.0
    ],
    [
        214.0, 211.0, 212.0, 214.0, 217.0, 214.0, 219.0, 222.0, 223.0, 223.0, 226.0, 228.0, 229.0, 228.0, 230.0, 229.0,
        228.0, 228.0, 229.0, 228.0, 226.0, 226.0, 231.0, 230.0, 229.0, 227.0, 226.0, 224.0, 226.0, 225.0, 226.0, 222.0,
        220.0, 218.0, 218.0, 216.0, 218.0, 220.0, 221.0, 222.0, 222.0, 219.0, 220.0, 219.0, 219.0, 217.0
    ],
    [
        211.0, 212.0, 212.0, 214.0, 215.0, 219.0, 218.0, 220.0, 222.0, 222.0, 226.0, 229.0, 231.0, 228.0, 227.0, 229.0,
        228.0, 227.0, 229.0, 228.0, 228.0, 229.0, 232.0, 230.0, 229.0, 227.0, 228.0, 224.0, 226.0, 226.0, 226.0, 223.0,
        223.0, 220.0, 219.0, 219.0, 219.0, 221.0, 223.0, 218.0, 221.0, 218.0, 218.0, 217.0, 221.0, 218.0
    ],
    [
        214.0, 213.0, 213.0, 214.0, 215.0, 219.0, 221.0, 221.0, 220.0, 223.0, 225.0, 228.0, 229.0, 228.0, 227.0, 231.0,
        232.0, 229.0, 231.0, 229.0, 230.0, 231.0, 230.0, 230.0, 228.0, 225.0, 228.0, 226.0, 226.0, 225.0, 225.0, 224.0,
        223.0, 221.0, 220.0, 219.0, 221.0, 220.0, 220.0, 213.0, 216.0, 215.0, 216.0, 217.0, 220.0, 218.0
    ],
    [
        216.0, 213.0, 214.0, 214.0, 215.0, 216.0, 219.0, 221.0, 221.0, 222.0, 225.0, 225.0, 227.0, 228.0, 228.0, 230.0,
        233.0, 231.0, 231.0, 230.0, 231.0, 231.0, 230.0, 229.0, 228.0, 226.0, 230.0, 227.0, 226.0, 225.0, 224.0, 224.0,
        221.0, 221.0, 220.0, 222.0, 221.0, 221.0, 216.0, 215.0, 215.0, 214.0, 218.0, 219.0, 219.0, 219.0
    ],
    [
        216.0, 214.0, 214.0, 214.0, 215.0, 215.0, 217.0, 219.0, 221.0, 224.0, 225.0, 226.0, 227.0, 227.0, 229.0, 232.0,
        233.0, 231.0, 230.0, 230.0, 230.0, 230.0, 230.0, 227.0, 227.0, 225.0, 228.0, 226.0, 226.0, 226.0, 226.0, 223.0,
        221.0, 221.0, 221.0, 221.0, 222.0, 223.0, 220.0, 219.0, 217.0, 218.0, 219.0, 220.0, 221.0, 220.0
    ],
    [
        216.0, 214.0, 214.0, 214.0, 216.0, 216.0, 216.0, 219.0, 223.0, 224.0, 225.0, 227.0, 226.0, 226.0, 230.0, 231.0,
        232.0, 231.0, 231.0, 230.0, 226.0, 228.0, 229.0, 228.0, 226.0, 226.0, 226.0, 226.0, 226.0, 227.0, 227.0, 225.0,
        222.0, 220.0, 221.0, 224.0, 224.0, 223.0, 220.0, 222.0, 220.0, 222.0, 221.0, 221.0, 221.0, 220.0
    ],
    [
        216.0, 214.0, 215.0, 214.0, 213.0, 219.0, 216.0, 219.0, 222.0, 223.0, 226.0, 227.0, 227.0, 226.0, 229.0, 230.0,
        230.0, 231.0, 230.0, 229.0, 230.0, 231.0, 229.0, 229.0, 228.0, 229.0, 227.0, 227.0, 227.0, 227.0, 226.0, 225.0,
        223.0, 220.0, 221.0, 223.0, 225.0, 224.0, 221.0, 222.0, 220.0, 220.0, 221.0, 220.0, 219.0, 220.0
    ],
    [
        215.0, 214.0, 216.0, 216.0, 212.0, 215.0, 217.0, 220.0, 222.0, 223.0, 225.0, 226.0, 226.0, 227.0, 231.0, 232.0,
        231.0, 230.0, 230.0, 230.0, 230.0, 232.0, 232.0, 230.0, 229.0, 228.0, 231.0, 229.0, 229.0, 226.0, 224.0, 225.0,
        223.0, 222.0, 222.0, 222.0, 224.0, 223.0, 222.0, 222.0, 222.0, 220.0, 219.0, 218.0, 219.0, 220.0
    ],
    [
        215.0, 215.0, 217.0, 215.0, 216.0, 216.0, 218.0, 220.0, 221.0, 222.0, 225.0, 227.0, 228.0, 228.0, 232.0, 233.0,
        231.0, 231.0, 231.0, 231.0, 232.0, 231.0, 229.0, 229.0, 229.0, 228.0, 229.0, 229.0, 228.0, 226.0, 224.0, 225.0,
        224.0, 222.0, 223.0, 222.0, 224.0, 223.0, 222.0, 223.0, 222.0, 222.0, 219.0, 218.0, 219.0, 220.0
    ],
    [
        215.0, 216.0, 218.0, 218.0, 217.0, 218.0, 218.0, 220.0, 220.0, 219.0, 223.0, 224.0, 228.0, 228.0, 231.0, 232.0,
        230.0, 230.0, 233.0, 231.0, 232.0, 231.0, 229.0, 229.0, 228.0, 227.0, 229.0, 227.0, 227.0, 225.0, 225.0, 225.0,
        222.0, 222.0, 223.0, 223.0, 224.0, 222.0, 221.0, 223.0, 223.0, 222.0, 220.0, 219.0, 219.0, 220.0
    ],
    [
        216.0, 217.0, 218.0, 218.0, 218.0, 219.0, 219.0, 220.0, 219.0, 220.0, 223.0, 226.0, 228.0, 228.0, 229.0, 229.0,
        228.0, 229.0, 232.0, 231.0, 233.0, 233.0, 231.0, 229.0, 228.0, 228.0, 227.0, 228.0, 228.0, 226.0, 226.0, 224.0,
        222.0, 223.0, 223.0, 223.0, 224.0, 222.0, 223.0, 223.0, 222.0, 221.0, 221.0, 218.0, 218.0, 220.0
    ],
    [
        217.0, 217.0, 217.0, 218.0, 217.0, 220.0, 220.0, 221.0, 219.0, 219.0, 222.0, 225.0, 225.0, 228.0, 228.0, 228.0,
        228.0, 230.0, 231.0, 231.0, 233.0, 232.0, 233.0, 231.0, 231.0, 229.0, 229.0, 228.0, 228.0, 226.0, 224.0, 225.0,
        224.0, 224.0, 224.0, 223.0, 223.0, 223.0, 221.0, 224.0, 221.0, 220.0, 220.0, 219.0, 218.0, 219.0
    ],
    [
        217.0, 217.0, 217.0, 219.0, 219.0, 220.0, 221.0, 221.0, 220.0, 220.0, 222.0, 225.0, 226.0, 227.0, 227.0, 228.0,
        228.0, 231.0, 233.0, 232.0, 231.0, 232.0, 234.0, 234.0, 231.0, 230.0, 229.0, 228.0, 226.0, 225.0, 225.0, 226.0,
        224.0, 223.0, 224.0, 224.0, 223.0, 224.0, 223.0, 224.0, 223.0, 221.0, 221.0, 221.0, 219.0, 218.0
    ],
    [
        217.0, 218.0, 219.0, 221.0, 220.0, 221.0, 221.0, 223.0, 223.0, 221.0, 221.0, 225.0, 227.0, 228.0, 228.0, 229.0,
        228.0, 230.0, 232.0, 230.0, 229.0, 230.0, 231.0, 232.0, 229.0, 229.0, 229.0, 226.0, 227.0, 227.0, 225.0, 224.0,
        222.0, 223.0, 224.0, 224.0, 224.0, 224.0, 225.0, 224.0, 222.0, 221.0, 219.0, 221.0, 219.0, 218.0
    ]])
    return matrix


def select_clusters_type(matrix: np.ndarray):
    rows, column = matrix.shape[:2]
    clusters = set()
    for i in range(rows):
        for j in range(column):
            clusters.add(matrix[i][j])
    return list(clusters)


def area_selection(matrix, clusters, matrix_of_elevation):
    """
    Выделил область кластера
    """
    clusters_obj = []
    rows, column = matrix.shape[:2]

    for cluster_id in clusters:
        min_i = min_j = column
        max_i = max_j = 0
        for i in range(rows):
            if cluster_id not in matrix[i]:
                continue

            if i < min_i:
                min_i = i

            if i > max_i:
                max_i = i

            for j in range(column):
                if matrix[i][j] != cluster_id:
                    continue

                if j < min_j:
                    min_j = j

                if j > max_j:
                    max_j = j
        area = matrix[min_i:max_i + 1, min_j:max_j + 1]

        clusters_obj.append(Cluster(cluster_id, area, min_i, max_i, min_j, max_j))
        clusters_obj[-1].set_elevation(matrix_of_elevation, is_clear_wrong_id=False)
        clusters_obj[-1].set_elevation(matrix_of_elevation, is_clear_wrong_id=False)

        cv.namedWindow(f'[{min_i}, {max_i}: {min_j}, {max_j}]', cv.WINDOW_NORMAL)
        cv.imshow(f'[{min_i}, {max_i}: {min_j}, {max_j}]', area.astype(np.uint8))

        cv.namedWindow(f'elevat [{min_i}, {max_i}: {min_j}, {max_j}]', cv.WINDOW_NORMAL)
        cv.imshow(f'elevat [{min_i}, {max_i}: {min_j}, {max_j}]', clusters_obj[-1].area_elevation.astype(np.uint8))

    k = cv.waitKey()
    while k != ord('q'):
        k = cv.waitKey()

    return clusters_obj


def main(matrix, clusters):
    cv.namedWindow('input', cv.WINDOW_NORMAL)
    cv.imshow('input', matrix.astype(np.uint8))
    print('clusters_', clusters)

    scale_matrix = clusterization.some_scaling(matrix)

    cv.namedWindow('color_scaling', cv.WINDOW_NORMAL)
    cv.imshow('color_scaling', scale_matrix.astype(np.uint8))
    scale_clusters = select_clusters_type(scale_matrix)
    print('scale_clusters', scale_clusters)

    # area_selection(matrix, clusters)

    area_clusters = area_selection(scale_matrix, scale_clusters, get_real_elevation())


if __name__ == "__main__":
    matrix_ = np.array([[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0, 3.0, 3.0, 3.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0, 3.0, 3.0, 3.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0, 3.0, 3.0, 3.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0, 3.0, 3.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0, 3.0, 3.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 3.0, 3.0, 3.0, 3.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0,
                        2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ],
                       [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                        4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0,
                        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0
                        ]])
    clusters_ = [0, 1, 2, 3, 4, 5, 6]
    main(matrix_, clusters_)
